<?php
namespace Wainwright\CasinoDog\Controllers\Game\[GAME_PROVIDER_TAG_CAPITALSTART];

use Wainwright\CasinoDog\Controllers\Game\GameKernel;
use Wainwright\CasinoDog\Controllers\Game\GameKernelTrait;
use Illuminate\Http\Request;

class [GAME_PROVIDER_TAG_CAPITALSTART]Main extends GameKernel
{
    use GameKernelTrait;

    /*
    * load_game_session() is where we create/continue any game session and where we initiate the game content
    *
    * @param [type] $data
    * @return void
    */
    public function load_game_session($data) {
        $token = $data['token_internal'];
        $session = new [GAME_PROVIDER_TAG_CAPITALSTART]Sessions();
        $game_content = $session->create_session($token);
        return $this->game_launch($game_content);
    }

    /*
    * game_launch() is where we send the finalized HTML content to the launcher blade view template
    *
    * @param [type] $game_content
    * @return void
    */
    public function game_launch($game_content) {
        return view('wainwright::launcher-content-[GAME_PROVIDER_TAG_ALL-LOWER]')->with('game_content', $game_content);
    }

    /*
    * game_event() is where direct API requests from inside games are received
    *
    * @param Request $request
    * @return void
    */
    public function game_event(Request $request) {
        $event = new [GAME_PROVIDER_TAG_CAPITALSTART]Game();
        return $event->game_event($request);
    }

    /*
    * error_handle() for handling errors, meant to make similar error pages as original game but can be used for any error handling you need
    *
    * @param [type] $type
    * @param [type] $message
    * @return void
    */
    public function error_handle($type, $message = NULL) {
        if($type === 'incorrect_game_event_request') {
            $message = ['status' => 400, 'error' => $type];
            return response()->json($message, 400);
        }
        abort(400, $message);
    }


    /*
    * dynamic_asset() used to load altered javascript from internal storage, simply point the assets you need loaded through here in the modify_content() to point to /dynamic_asset/[ASSET_NAME]
    *
    * @param string $asset_name
    * @param Request $request
    * @return void
    */
    public function dynamic_asset(string $asset_name, Request $request) 
    {
        /* example *
            if($asset_name === 'logo_info.js') {
                return $this->pretendResponseIsFile(__DIR__.'/AssetStorage/logo_info.js', 'application/javascript; charset=utf-8');
            }

            if($asset_name === 'minilobby.json') {
                $lobbyGames = file_get_contents(__DIR__.'/AssetStorage/minilobby.json');

                $time = time();
                $mgckey = $_GET['mgckey'];
                $signature = hash_hmac('md5', $mgckey, $time.$mgckey);

                $gameStartURL = config('gameconfig.[GAME_PROVIDER_TAG_ALL-LOWER].minilobby_url').'/'.$signature.'/'.$time;
                $data_origin = json_decode($lobbyGames);
                $data_origin->gameLaunchURL = $gameStartURL;
                $data_origin = json_encode($data_origin);

                return $data_origin;
            }
        */
    }

    /*
    * fake_iframe_url() used to display as src in iframe, this is only visual. If you have access to game aggregation you should generate a working session with game provider.
    *
    * @param string $slug
    * @param [type] $currency
    * @return void
    */
    public function fake_iframe_url(string $slug, $currency) {
        /* example *
        
            $game_id_purification = explode(':', $slug);
            if($game_id_purification[1]) {
                $game_id = $game_id_purification[1];
            }
            if($currency === 'DEMO' || $currency === 'FUN') {
                $build_url = 'https://bog.[GAME_PROVIDER_TAG_ALL-LOWER].net/gs2c/openGame.do?gameSymbol='.$game_id.'&websiteUrl=https%3A%2F%2Fblueoceangaming.com&platform=WEB&jurisdiction=99&lang=en&cur='.$currency;
            }
            $build_url = 'https://bog.[GAME_PROVIDER_TAG_ALL-LOWER].net/gs2c/html5Game.do?gameSymbol='.$game_id.'&websiteUrl=https%3A%2F%2Fblueoceangaming.com&platform=WEB&jurisdiction=99&lang=en&cur='.$currency;
            return $build_url;
            
        */
    }

    /*
    * default_gamelist() used to import/export a default gamelist from file storage
    *
    * @param string $action
    * @param json $data
    * @return void
    */
    public function default_gamelist($action, $data = NULL)
    {
        $storage_location = __DIR__.'/AssetStorage/default_gamelist.json';
        if (!file_exists($storage_location)) {
            file_put_contents($storage_location, '[]');
        }

        if($action === "store") {
            if($data === NULL) {
                $message = ['status' => 400, 'error' => "You need to supply data to import."];
                return $message;
            }

            if(!$this->isJSON($data)) {
                $message = ['status' => 400, 'error' => "Data does not seem to be valid JSON scheme."];
                return $message;
            }
            $store = file_put_contents($storage_location, $data);
            $message = array('status' => 200, 'message' => "Data saved at ".$storage_location);
            return $message;
        
        } elseif($action === "retrieve") {
            try {
                $storage_location = __DIR__.'/AssetStorage/default_gamelist.json';


                $retrieve = file_get_contents($storage_location);
                if($this->isJSON($retrieve)) {
                    $message = ['status' => 200, 'message' => $retrieve];
                } else {
                    $message = ['status' => 400, 'error' => "Data retrieved at '.$storage_location.' not seem to be valid JSON scheme."];

                }
                } catch(\Exception $e) {
                    $message = ['status' => 400, 'error' => $e->getMessage()];
                }
            return $message;
        } elseif($action === "get_storage_location") {
            $message = ['status' => 200, 'message' => $storage_location];
            return $message;
        }

        $message = ['status' => 400, 'error' => $action." action not valid in default_gamelist() function."];
        return $message;
    }

    /*
    * custom_entry_path() used for structuring the path the launcher is displayed on. You need to enable this in config ++ then copy the "/g" route in routes/games.php to reflect the custom entry path used below.
    *
    * @param [type] $gid
    * @return void
    */
    public function custom_entry_path($gid)
    {
        /* example *
            $url = env('APP_URL')."/casino/ContainerLauncher";
            return $url;
        */
    }

    /*
    * modify_game() used for replacing HTML content
    *
    * @param [type] $token_internal
    * @param [type] $game_content
    * @return void
    */
    public function modify_game($token_internal, $game_content)
    {
        $select_session = $this->get_internal_session($token_internal)['data'];
        $new_api_endpoint = config('casino-dog.games.[GAME_PROVIDER_TAG_ALL-LOWER].new_api_endpoint').$token_internal.'/'.$select_session['game_id_original'].'/play';  // building up the api endpoint we want to receive game events upon

        $gc = $game_content;
        
        /* example *
            $gc = str_replace('window.serverUrl="', 'window.serverUrl="'.$new_api_endpoint.'?origin_url=', $gc);
            $gc = str_replace('window.currency="NAN"', 'window.currency="USD"', $gc);
        */
        
       return $gc;
    }
}